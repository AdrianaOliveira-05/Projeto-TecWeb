O que falta:
Tabuleiro:
-Codificação
-Modos
Mensagens
IA

Ver porquê que quando clicamos em desistir, o dado de paus não inicializa 


setas: ← → ↑ ↓ ↖ ↗ ↘ ↙ 



// =====================
// VARIÁVEIS PRINCIPAIS
// =====================
const identificacao = document.getElementById("identificacao");
const configuracao = document.getElementById("configuracao");
const comandos = document.getElementById("comandos");
const jogo = document.getElementById("jogo");
const gameGrid = document.getElementById("gameGrid");
const comandosAntes = document.getElementById("comandosAntes");
const comandosDurante = document.getElementById("comandosDurante");

const btnLogin = document.getElementById("btnLogin");
const btnIniciarJogo = document.getElementById("btnIniciarJogo");
const btnDesistir = document.getElementById("btnDesistir");

const dadoArea = document.getElementById("dadoArea");
const paus = document.querySelectorAll(".pau");
const resultadoDado = document.getElementById("resultadoDado");
const mensagemTexto = document.getElementById("mensagemTexto");

// =====================
// ESTADO DO JOGO
// =====================
let tabuleiroDados = [];
let linhas = 4;
let colunas = 9;
let pathOrder = [];
let indexMap = [];
let jogadorAtual = "A";
let valorDadoAtual = null;
let casaSelecionada = null;
let destinosValidosSelecionados = new Set();

// =====================
// INICIALIZAÇÃO
// =====================
window.addEventListener("DOMContentLoaded", () => {
  identificacao.classList.remove("oculto");
  configuracao.classList.add("oculto");
  comandos.classList.add("oculto");
  jogo.classList.add("oculto");
  comandosAntes.classList.remove("oculto");
  comandosDurante.classList.add("oculto");
});

btnLogin.addEventListener("click", () => {
  identificacao.classList.add("oculto");
  configuracao.classList.remove("oculto");
  comandos.classList.remove("oculto");
});

// =====================
// TABULEIRO E PATH
// =====================
function construirPath(l, c) {
  pathOrder = [];
  indexMap = Array.from({ length: l }, () => Array(c).fill(0));
  for (let i = 0; i < l; i++) {
    if (i % 2 === 0) {
      for (let j = 0; j < c; j++) {
        indexMap[i][j] = pathOrder.length;
        pathOrder.push({ i, j });
      }
    } else {
      for (let j = c - 1; j >= 0; j--) {
        indexMap[i][j] = pathOrder.length;
        pathOrder.push({ i, j });
      }
    }
  }
}

function coordToIndex(i, j) {
  return indexMap[i][j];
}
function indexToCoord(idx) {
  return pathOrder[idx];
}

// =====================
// GERAR TABULEIRO
// =====================
function gerarTabuleiro() {
  gameGrid.innerHTML = "";
  linhas = 4;
  colunas = 9;

  construirPath(linhas, colunas);
  inicializarTabuleiro(linhas, colunas);
  gameGrid.style.gridTemplateColumns = `repeat(${colunas}, 40px)`;
  mensagemTexto.innerText = "Jogo iniciado!";
}

// =====================
// DESENHAR TABULEIRO
// =====================
function desenharTabuleiro(destinos = []) {
  gameGrid.innerHTML = "";
  destinosValidosSelecionados.clear();

  for (let i = 0; i < linhas; i++) {
    for (let j = 0; j < colunas; j++) {
      const casa = document.createElement("div");
      casa.classList.add("cell");
      casa.dataset.linha = i;
      casa.dataset.coluna = j;

      // --- SETAS (grelha do jogador azul) ---
      let simbolos = [];

      if (i === 0) {
        if (j === 0) simbolos = ["↙"];
        else if (j === colunas - 1) simbolos = ["↖"];
        else simbolos = ["←"];
      } else if (i === 1) {
        if (j === 0) simbolos = ["↘", "↗"];
        else if (j === colunas - 1) simbolos = ["↗", "↘"];
        else simbolos = ["→"];
      } else if (i === 2) {
        if (j === 0) simbolos = ["↖"];
        else if (j === colunas - 1) simbolos = ["↙", "↖"];
        else simbolos = ["←"];
      } else if (i === 3) {
        if (j === colunas - 1) simbolos = ["↗"];
        else simbolos = ["→"];
      }

      // adicionar todas as setas da célula
      simbolos.forEach((s, idx) => {
        const seta = document.createElement("div");
        seta.classList.add("seta-fundo");
        seta.textContent = s;
        // se houver duas, posicionar uma mais acima e outra mais abaixo
        if (simbolos.length === 2) {
          seta.style.fontSize = "14px";
          seta.style.position = "absolute";
          seta.style.top = idx === 0 ? "8px" : "20px";
        }
        casa.appendChild(seta);
      });

      // desenhar peça
      const peca = tabuleiroDados[i][j];
      if (peca) {
        const circulo = document.createElement("div");
        circulo.classList.add("peca");
        circulo.style.background = peca.owner === "A" ? "royalblue" : "firebrick";
        circulo.style.opacity = "0.85";
        casa.appendChild(circulo);
      }

      // bolas transparentes de destino
      const destinoMarcado = destinos.find(d => d.i === i && d.j === j);
      if (destinoMarcado) {
        const alvo = document.createElement("div");
        alvo.classList.add("destino-transparente");
        casa.appendChild(alvo);
      }

      casa.addEventListener("click", () => selecionarCasa(i, j));
      gameGrid.appendChild(casa);
    }
  }
}

// =====================
// ESTADO INICIAL
// =====================
function inicializarTabuleiro(l, c) {
  tabuleiroDados = [];
  for (let i = 0; i < l; i++) {
    const linha = [];
    for (let j = 0; j < c; j++) {
      if (i === 0) linha.push({ owner: "B", moved: false });
      else if (i === l - 1) linha.push({ owner: "A", moved: false });
      else linha.push(null);
    }
    tabuleiroDados.push(linha);
  }
  jogadorAtual = "A";
  desenharTabuleiro();
}

// =====================
// DADO DE PAUS
// =====================
function lancarDado() {
  let claros = 0;
  paus.forEach(pau => {
    const ladoClaro = Math.random() < 0.5;
    if (ladoClaro) {
      pau.classList.remove("escuro");
      claros++;
    } else {
      pau.classList.add("escuro");
    }
  });
  switch (claros) {
    case 0: valorDadoAtual = 6; break;
    case 1: valorDadoAtual = 1; break;
    case 2: valorDadoAtual = 2; break;
    case 3: valorDadoAtual = 3; break;
    case 4: valorDadoAtual = 4; break;
  }
  resultadoDado.textContent = `Resultado: ${valorDadoAtual}`;
}
dadoArea.addEventListener("click", () => {
  if (valorDadoAtual === null) lancarDado();
  else mensagemTexto.innerText = "Já tens um lançamento ativo!";
});

// =====================
// MOVIMENTO E DESTINOS
// =====================
function destinosPossiveis(i, j) {
  const peca = tabuleiroDados[i][j];
  if (!peca || valorDadoAtual === null) return [];
  // Exemplo simples — casas adjacentes horizontais
  const destinos = [];
  if (j + 1 < colunas) destinos.push({ i, j: j + 1 });
  return destinos;
}

function selecionarCasa(i, j) {
  const valor = tabuleiroDados[i][j];
  if (!valor || valor.owner !== jogadorAtual) return;

  const destinos = destinosPossiveis(i, j);
  casaSelecionada = { i, j };
  desenharTabuleiro(destinos);
}

// =====================
// INICIAR / DESISTIR
// =====================
btnIniciarJogo.addEventListener("click", () => {
  gerarTabuleiro();
  configuracao.classList.add("oculto");
  jogo.classList.remove("oculto");
  comandosAntes.classList.add("oculto");
  comandosDurante.classList.remove("oculto");
});

btnDesistir.addEventListener("click", () => {
  jogo.classList.add("oculto");
  configuracao.classList.remove("oculto");
  comandosDurante.classList.add("oculto");
  comandosAntes.classList.remove("oculto");
});











/* SETAS E DESTINOS */
.seta-fundo {
  position: absolute;
  inset: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 16px;
  color: rgba(0, 0, 0, 0.25);
  pointer-events: none;
}

.destino-transparente {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 70%;
  height: 70%;
  transform: translate(-50%, -50%);
  border: 2px dashed rgba(0, 0, 0, 0.2);
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.3);
  pointer-events: none;
}
