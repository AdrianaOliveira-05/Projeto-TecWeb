O que falta:
Tabuleiro:
-Codifica√ß√£o
-Modos
Mensagens
IA



setas: ‚Üê ‚Üí ‚Üë ‚Üì ‚Üñ ‚Üó ‚Üò ‚Üô 


function moverPeca(i1, j1, i2, j2) {
  const p1 = tabuleiroDados[i1][j1];
  if (!p1) return;

  // valida√ß√£o final (defensiva)
  const destinos = destinosPossiveis(i1, j1);
  if (!destinos.some(({ i, j }) => i === i2 && j === j2)) {
    mensagemTexto.innerText = "‚ùå Movimento inv√°lido.";
    desenharTabuleiro([]);
    return;
  }

  // captura se houver inimigo no destino
  const p2 = tabuleiroDados[i2][j2];
  if (p2 && p2.owner !== p1.owner) {
    tabuleiroDados[i2][j2] = null;
  }

  // mover
  tabuleiroDados[i2][j2] = { ...p1, moved: true };
  tabuleiroDados[i1][j1] = null;

  // sair do tabuleiro se terminou na linha final do advers√°rio
  const linhaFinalDoAdversario = (p1.owner === "A") ? 0 : (linhas - 1);
  if (i2 === linhaFinalDoAdversario) {
    tabuleiroDados[i2][j2] = null; // pe√ßa sai
    mensagemTexto.innerText = "üö™ A pe√ßa saiu do tabuleiro.";
  } else {
    mensagemTexto.innerText = `‚úÖ Pe√ßa movida para [${i2}, ${j2}].`;
  }

  desenharTabuleiro([]);
  casaSelecionada = null;

  // fim de jogo?
  const pecasA = contaPecasDoJogador("A");
  const pecasB = contaPecasDoJogador("B");
  if (pecasA === 0 || pecasB === 0) {
    const vencedor = pecasA > 0 ? "Jogador Azul (A)" : "Computador (B)";
    mensagemTexto.innerText = `üèÅ Fim do jogo! Venceu: ${vencedor}`;
    valorDadoAtual = null;
    resultadoDado.textContent = "Clique para lan√ßar";
    return;
  }

  // gerir turno (1,4,6 repetem)
  const usado = valorDadoAtual;
  const repete = [1, 4, 6].includes(usado);
  valorDadoAtual = null;
  resultadoDado.textContent = "Clique para lan√ßar";

  if (repete) {
    mensagemTexto.innerText += ` Jogaste ${usado}. üéâ Podes voltar a lan√ßar.`;
    if (jogadorAtual === "B") {
      // IA repete automaticamente
      setTimeout(() => { if (valorDadoAtual === null) lancarDado(); setTimeout(jogadaComputador, 500); }, 450);
    }
  } else {
    alternarJogador();
  }
}

function alternarJogador() {
  jogadorAtual = (jogadorAtual === "A") ? "B" : "A";
  mensagemTexto.innerText += ` Agora √© a vez do ${jogadorAtual === "A" ? "Jogador Azul" : "Computador (Vermelho)"}.`;

  if (jogadorAtual === "B") {
    // vez da IA: lan√ßa e joga
    setTimeout(() => {
      if (valorDadoAtual === null) lancarDado();
      setTimeout(jogadaComputador, 500);
    }, 450);
  }
}

// === IA: escolhe uma jogada v√°lida aleat√≥ria (espelho via getCellArrows)
function jogadaComputador() {
  if (jogadorAtual !== "B") return;
  if (valorDadoAtual === null) return;

  const jogadas = [];

  for (let i = 0; i < linhas; i++) {
    for (let j = 0; j < colunas; j++) {
      const p = tabuleiroDados[i][j];
      if (p?.owner !== "B") continue;
      const dests = destinosPossiveis(i, j);
      for (const d of dests) {
        // n√£o aterrar em aliado
        const alvo = tabuleiroDados[d.i][d.j];
        if (alvo && alvo.owner === "B") continue;
        jogadas.push({ oi: i, oj: j, di: d.i, dj: d.j });
      }
    }
  }

  if (jogadas.length === 0) {
    // sem jogadas ‚Üí consumir dado e passar
    mensagemTexto.innerText = "ü§ñ O computador n√£o tem jogadas v√°lidas. Passa a vez.";
    const usado = valorDadoAtual;
    valorDadoAtual = null;
    resultadoDado.textContent = "Clique para lan√ßar";
    const repete = [1, 4, 6].includes(usado);
    if (repete) {
      // repete mas n√£o tem jogadas ‚Äî simplesmente volta a lan√ßar e tentar de novo
      setTimeout(() => { if (valorDadoAtual === null) lancarDado(); setTimeout(jogadaComputador, 500); }, 450);
    } else {
      alternarJogador();
    }
    return;
  }

  const pick = jogadas[Math.floor(Math.random() * jogadas.length)];
  moverPeca(pick.oi, pick.oj, pick.di, pick.dj);
}
