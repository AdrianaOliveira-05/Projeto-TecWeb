O que falta:
Tabuleiro:
-Codificação
-Modos
Mensagens
IA



setas: ← → ↑ ↓ ↖ ↗ ↘ ↙ 


function destinosPossiveis(i, j) {
  const peca = tabuleiroDados[i][j];
  if (!peca || valorDadoAtual === null) return [];

  const passos = valorDadoAtual;
  const player = peca.owner;
  const destinos = [];

  function avancar(ci, cj, k, direcao, sentido) {
    if (k === passos) {
      destinos.push({ i: ci, j: cj });
      return;
    }

    // avança uma casa
    let ni = ci;
    let nj = cj + direcao;

    if (nj < 0 || nj >= colunas) {
      // chegou ao fim — muda de linha
      ni += sentido; // sobe (para azul) ou desce (para vermelho)
      if (ni < 0 || ni >= linhas) return; // saiu do tabuleiro
      direcao *= -1; // inverte a direção
      nj = Math.min(Math.max(nj, 0), colunas - 1);
    }

    // percorre recursivamente
    avancar(ni, nj, k + 1, direcao, sentido);
  }

  // parâmetros de movimento
  let direcao, sentido;
  if (player === "A") {
    // jogador azul: começa de baixo (linha 3) e sobe
    // linhas 3 e 1 → direita; linhas 2 e 0 → esquerda
    const direita = (i % 2 === 1);
    direcao = direita ? 1 : -1;
    sentido = -1; // sobe
  } else {
    // jogador vermelho: começa de cima (linha 0) e desce (espelho)
    const direita = (i % 2 === 0);
    direcao = direita ? 1 : -1;
    sentido = 1; // desce
  }

  avancar(i, j, 0, direcao, sentido);

  // Filtrar casas ocupadas por aliados
  const finais = destinos.filter(d => {
    const alvo = tabuleiroDados[d.i][d.j];
    return !(alvo && alvo.owner === player);
  });

  return finais;
}
