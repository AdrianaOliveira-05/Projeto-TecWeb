O que falta:
- tentar meter as setas diagonais direitas (quando tem duas numa so caixa)
- se desistirmos do jogo tem de mostrar a classifica√ßao que ficou ate a√≠ e mostrar o resultado na tabela das classifica√ßoes
- existem modo facil, medio e dificil em IA, temos de alterar isso
- meter as jogadas da IA a acontecer mais devagar, para se perceber melhor o que esta a acontecer
- aparecer mensagens quando as jogadas nao sao possiveis
- s√≥ come√ßa o jogo quando d√° 1 o dado
- uma pe√ßa nao pode avan√ßar outra, ainda que da mesma cor


function jogadaComputador() {
  if (jogadorAtual !== "B") return;

  // Passo 1: lan√ßar o dado de paus lentamente
  mensagemTexto.innerText = "ü§ñ O computador est√° a lan√ßar o dado...";
  setTimeout(() => {
    // Lan√ßa o dado
    lancarDado();

    // Espera um pouco para mostrar o valor do dado
    setTimeout(() => {
      if (valorDadoAtual === null) return;

      // ======================
      // RESTRI√á√ÉO: PRIMEIRA JOGADA PRECISA DE 1
      // ======================
      const algumaMovidaB = tabuleiroDados.flat().some(p => p?.owner === "B" && p.moved);
      if (!algumaMovidaB && valorDadoAtual !== 1) {
        mensagemTexto.innerText = "ü§ñ O computador n√£o pode come√ßar (n√£o saiu 1). Passa a vez para ti.";
        valorDadoAtual = null;
        resultadoDado.textContent = "Clique para lan√ßar";
        setTimeout(() => alternarJogador(), 1500);
        return;
      }

      // ======================
      // GERAR JOGADAS V√ÅLIDAS
      // ======================
      const jogadas = [];

      for (let i = 0; i < linhas; i++) {
        for (let j = 0; j < colunas; j++) {
          const p = tabuleiroDados[i][j];
          if (p?.owner !== "B") continue;
          const dests = destinosPossiveis(i, j);
          for (const d of dests) {
            // n√£o aterrar em aliado
            const alvo = tabuleiroDados[d.i][d.j];
            if (alvo && alvo.owner === "B") continue;
            jogadas.push({ oi: i, oj: j, di: d.i, dj: d.j });
          }
        }
      }

      if (jogadas.length === 0) {
        // sem jogadas ‚Üí consumir dado e passar
        mensagemTexto.innerText = "ü§ñ O computador n√£o tem jogadas v√°lidas. Passa a vez.";
        const usado = valorDadoAtual;
        valorDadoAtual = null;
        resultadoDado.textContent = "Clique para lan√ßar";
        const repete = [1, 4, 6].includes(usado);
        if (repete) {
          // repete mas n√£o tem jogadas ‚Äî simplesmente volta a lan√ßar e tentar de novo
          setTimeout(() => {
            if (valorDadoAtual === null) lancarDado();
            setTimeout(jogadaComputador, 700);
          }, 600);
        } else {
          setTimeout(() => alternarJogador(), 1000);
        }
        return;
      }

      // ======================
      // ESCOLHER UMA JOGADA ALEAT√ìRIA
      // ======================
      const pick = jogadas[Math.floor(Math.random() * jogadas.length)];

      mensagemTexto.innerText = `ü§ñ O computador escolheu mover a pe√ßa de [${pick.oi}, ${pick.oj}] para [${pick.di}, ${pick.dj}]...`;

      // pequena pausa antes do movimento para ser vis√≠vel
      setTimeout(() => {
        moverPeca(pick.oi, pick.oj, pick.di, pick.dj);
      }, 2000); // espera 2s antes de mover

    }, 2000); // espera 2s entre lan√ßar o dado e decidir a jogada

  }, 800); // espera 0.8s antes de come√ßar a lan√ßar o dado
}
